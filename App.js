import React, { useState, useEffect, useRef } from 'react';
import {
  SafeAreaView,
  StyleSheet,
  View,
  Text,
  TextInput,
  Button,
  FlatList,
  TouchableOpacity,
  Alert,
  Platform,
  StatusBar,
} from 'react-native';
import DateTimePickerModal from 'react-native-modal-datetime-picker';
import Constants from 'expo-constants';
import * as Notifications from 'expo-notifications';
import * as Device from 'expo-device';

Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: true,
    shouldSetBadge: false,
  }),
});

const App = () => {
  const [tasks, setTasks] = useState([]);
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [date, setDate] = useState(new Date());
  const [isDatePickerVisible, setDatePickerVisibility] = useState(false);
  const [expoPushToken, setExpoPushToken] = useState('');
  const [notification, setNotification] = useState(false);
  const notificationListener = useRef();
  const responseListener = useRef();
  const notificationIds = useRef({});

  useEffect(() => {
    registerForPushNotificationsAsync().then(token => {
      setExpoPushToken(token || '');
      console.log("Expo Push Token:", token);
    });

    notificationListener.current = Notifications.addNotificationReceivedListener(notification => {
      console.log("Notification received:", notification);
      setNotification(notification);
    });


    responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {
      console.log("Notification response:", response);
    });

    return () => {
      Notifications.removeNotificationSubscription(notificationListener.current);
      Notifications.removeNotificationSubscription(responseListener.current);
    };
  }, []);


  const showDatePicker = () => setDatePickerVisibility(true);
  const hideDatePicker = () => setDatePickerVisibility(false);
  const handleConfirmDate = (selectedDate) => {
    const now = new Date();
    now.setMinutes(now.getMinutes() - 1);
    if (selectedDate < now) {
      Alert.alert("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —á–∞—Å", "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –º–∞–π–±—É—Ç–Ω—ñ–π —á–∞—Å –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è.");
    } else {
      setDate(selectedDate);
    }
    hideDatePicker();
  };


  const scheduleNotification = async (taskTitle, taskDescription, scheduleTime) => {
    try {
      const trigger = new Date(scheduleTime);

      const id = await Notifications.scheduleNotificationAsync({
        content: {
          title: taskTitle,
          body: taskDescription || '–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è!',
          sound: true,
          priority: Notifications.AndroidNotificationPriority.HIGH,
        },
        trigger,
      });

      console.log('–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ, ID:', id);
      return id;
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:', error);
      Alert.alert('–ü–æ–º–∏–ª–∫–∞', `–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: ${error.message}`);
      return null;
    }
  };

  const cancelNotification = async (notificationId) => {
    if (!notificationId) {
      console.warn("–°–ø—Ä–æ–±–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –±–µ–∑ ID.");
      return;
    }

    try {
      await Notifications.cancelScheduledNotificationAsync(notificationId);
      console.log('–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ, ID:', notificationId);
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:', error);
    }
  };


  const addTask = async () => {
    if (!title.trim()) {
      Alert.alert('–ü–æ—Ä–æ–∂–Ω—è –Ω–∞–∑–≤–∞', '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∑–∞–¥–∞—á—ñ.');
      return;
    }

    const now = new Date();
    if (!date || date <= now) {
      Alert.alert('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —á–∞—Å', '–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –º–∞–π–±—É—Ç–Ω—ñ–π —á–∞—Å –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è.');
      return;
    }

    const notificationId = await scheduleNotification(title, description, date);
    if (notificationId) {
      const newTask = {
        id: Date.now().toString(),
        title: title.trim(),
        description: description.trim(),
        date: date,
        notificationId: notificationId,
      };

      setTasks(prevTasks => [...prevTasks, newTask]);
      notificationIds.current[newTask.id] = notificationId;

      setTitle('');
      setDescription('');
      const nextDefaultDate = new Date();
      nextDefaultDate.setMinutes(nextDefaultDate.getMinutes() + 5);
      setDate(nextDefaultDate);
    } else {
      console.log('–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.');
    }
  };

  const deleteTask = (taskId) => {
    const notificationIdToCancel = notificationIds.current[taskId];

    Alert.alert(
      '–í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–¥–∞—á—É?',
      '–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü—é –∑–∞–¥–∞—á—É —Ç–∞ —ó—ó –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è?',
      [
        { text: '–°–∫–∞—Å—É–≤–∞—Ç–∏', style: 'cancel' },
        {
          text: '–í–∏–¥–∞–ª–∏—Ç–∏',
          style: 'destructive',
          onPress: async () => {
            if (notificationIdToCancel) {
              await cancelNotification(notificationIdToCancel);
              delete notificationIds.current[taskId];
            } else {
              console.log(`–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ notificationId –¥–ª—è –∑–∞–¥–∞—á—ñ ${taskId} –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.`);
            }
            setTasks(prevTasks => prevTasks.filter(task => task.id !== taskId));
          },
        },
      ],
      { cancelable: true }
    );
  };

  const renderTask = ({ item }) => (
    <View style={styles.taskItem}>
      <View style={styles.taskTextContainer}>
        <Text style={styles.taskTitle}>{item.title}</Text>
        {item.description ? <Text style={styles.taskDescription}>{item.description}</Text> : null}
        <Text style={styles.taskDate}>
          –ù–∞–≥–∞–¥–∞—Ç–∏: {item.date.toLocaleDateString('uk-UA', { day: '2-digit', month: 'long', year: 'numeric' })} –æ {item.date.toLocaleTimeString('uk-UA', { hour: '2-digit', minute: '2-digit' })}
        </Text>
      </View>
      <TouchableOpacity onPress={() => deleteTask(item.id)} style={styles.deleteButton}>
        <Text style={styles.deleteButtonText}>üóëÔ∏è</Text>
      </TouchableOpacity>
    </View>
  );

  return (
    <SafeAreaView style={styles.safeArea}>
      <StatusBar barStyle={Platform.OS === 'ios' ? 'dark-content' : 'default'} />
      <View style={styles.container}>
        <Text style={styles.header}>To-Do Reminder</Text>
        <View style={styles.inputContainer}>
          <TextInput
            style={styles.input}
            placeholder="–ù–∞–∑–≤–∞ –∑–∞–¥–∞—á—ñ"
            value={title}
            onChangeText={setTitle}
            placeholderTextColor="#999"
          />
          <TextInput
            style={styles.input}
            placeholder="–û–ø–∏—Å (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)"
            value={description}
            onChangeText={setDescription}
            placeholderTextColor="#999"
          />
          <View style={styles.dateContainer}>
            <Text style={styles.dateLabel}>–ß–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:</Text>
            <Button
              title={date ? date.toLocaleString('uk-UA', { hour: '2-digit', minute: '2-digit', day: 'numeric', month: 'short' }) : "–û–±—Ä–∞—Ç–∏ —á–∞—Å"}
              onPress={showDatePicker}
            />
          </View>
          <DateTimePickerModal
            isVisible={isDatePickerVisible}
            mode="datetime"
            date={date || new Date()}
            onConfirm={handleConfirmDate}
            onCancel={hideDatePicker}
            minimumDate={new Date()}
            locale="uk-UA"
            confirmTextIOS="–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏"
            cancelTextIOS="–°–∫–∞—Å—É–≤–∞—Ç–∏"
            headerTextIOS="–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É —Ç–∞ —á–∞—Å"
          />
          <Button
            title="–î–æ–¥–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è"
            onPress={addTask}
            disabled={!title.trim() || !date || date <= new Date()}
            color="#007AFF"
          />
          {!expoPushToken && (
            <TouchableOpacity
              onPress={() => registerForPushNotificationsAsync().then(token => setExpoPushToken(token || ''))}
              style={styles.registerButton}
            >
              <Text style={styles.warningText}>–î–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–æ–∑–≤–æ–ª–∏. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å, —â–æ–± –¥–æ–∑–≤–æ–ª–∏—Ç–∏.</Text>
            </TouchableOpacity>
          )}
        </View>
        <FlatList
          data={tasks}
          renderItem={renderTask}
          keyExtractor={item => item.id}
          style={styles.list}
          ListEmptyComponent={<Text style={styles.emptyListText}>–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ—Ä–æ–∂–Ω—ñ–π</Text>}
          contentContainerStyle={{ paddingBottom: 20 }}
        />
      </View>
    </SafeAreaView>
  );
};


async function registerForPushNotificationsAsync() {
  let token;

  if (Platform.OS === 'android') {
    await Notifications.setNotificationChannelAsync('default', {
      name: 'default',
      importance: Notifications.AndroidImportance.MAX,
      vibrationPattern: [0, 250, 250, 250],
      lightColor: '#FF231F7C',
    });
  }

  if (Device.isDevice) {
    const { status: existingStatus } = await Notifications.getPermissionsAsync();
    let finalStatus = existingStatus;

    if (existingStatus !== 'granted') {
      const { status } = await Notifications.requestPermissionsAsync();
      finalStatus = status;
    }

    if (finalStatus !== 'granted') {
      console.log('Failed to get push token for push notification!');
      return null;
    }

    token = (await Notifications.getExpoPushTokenAsync({
      projectId: Constants.expoConfig?.extra?.eas?.projectId || undefined,
    })).data;
    console.log('Expo Push Token:', token);
  } else {
    console.log('Must use physical device for Push Notifications');
  }

  return token;
}

const styles = StyleSheet.create({
  safeArea: {
    flex: 1,
    backgroundColor: '#F5F5F7',
  },
  container: {
    flex: 1,
    padding: 15,
  },
  header: {
    fontSize: 26,
    fontWeight: '600',
    marginBottom: 25,
    textAlign: 'center',
    color: '#1C1C1E',
  },
  inputContainer: {
    marginBottom: 25,
    padding: 20,
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  input: {
    height: 50,
    borderColor: '#D1D1D6',
    borderWidth: 1,
    marginBottom: 15,
    paddingHorizontal: 15,
    borderRadius: 8,
    backgroundColor: '#FFFFFF',
    fontSize: 16,
    color: '#000000',
  },
  dateContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    marginBottom: 20,
    paddingVertical: 5,
  },
  dateLabel: {
    fontSize: 16,
    color: '#3C3C43',
  },
  list: {
    flex: 1,
    marginTop: 10,
  },
  taskItem: {
    backgroundColor: '#FFFFFF',
    paddingVertical: 15,
    paddingHorizontal: 20,
    marginBottom: 12,
    borderRadius: 10,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 2,
    elevation: 1,
  },
  taskTextContainer: {
    flex: 1,
    marginRight: 15,
  },
  taskTitle: {
    fontSize: 17,
    fontWeight: '500',
    color: '#000000',
  },
  taskDescription: {
    fontSize: 14,
    color: '#8A8A8E',
    marginTop: 5,
  },
  taskDate: {
    fontSize: 13,
    color: '#8A8A8E',
    marginTop: 6,
  },
  deleteButton: {
    padding: 5,
    marginLeft: 5,
  },
  deleteButtonText: {
    fontSize: 22,
    color: '#FF3B30',
  },
  emptyListText: {
    textAlign: 'center',
    marginTop: 50,
    fontSize: 16,
    color: '#8A8A8E',
  },
  warningText: {
    textAlign: 'center',
    color: '#FF9500',
    fontSize: 13,
    marginTop: 10,
    marginBottom: 5,
  },
  registerButton: {
    padding: 10,
    backgroundColor: '#F2F2F7',
    borderRadius: 8,
    marginTop: 10,
  },
});

export default App;